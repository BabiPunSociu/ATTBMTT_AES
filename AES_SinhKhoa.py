import AES_MaHoa

#==============================================================================
def CreateMatrix4x4(k): # string key 16 byte ~ 32 chữ cái => (4x4)
    Matrix = [
        [k[0]+k[1], k[8]+k[9], k[16]+k[17], k[24]+k[25]],
        [k[2]+k[3], k[10]+k[11], k[18]+k[19], k[26]+k[27]],
        [k[4]+k[5], k[12]+k[13], k[20]+k[21], k[28]+k[29]],
        [k[6]+k[7], k[14]+k[15], k[22]+k[23], k[30]+k[31]]
        ]
    return Matrix
#==============================================================================
def get_RCon(j):
    if j==1:
        return '01'+'000000'
    if j==2:
        return '02'+'000000'
    if j==3:
        return '04'+'000000'
    if j==4:
        return '08'+'000000'
    if j==5:
        return '10'+'000000'
    if j==6:
        return '20'+'000000'
    if j==7:
        return '40'+'000000'
    if j==8:
        return '80'+'000000'
    if j==9:
        return '1B'+'000000'
    return '36'+'000000'
#==============================================================================
def WordXorWord(W1, W2):
    W = ''
    for i in range(8):
        W+=AES_MaHoa.HexXorHex(W1[i], W2[i])
    return W
#==============================================================================
def G(str_W3, vong_lap): # 4 byte ~ 8 chữ cái
    # Dịch vòng trái
    str_W3 = str_W3[2:] + str_W3[:2]
    # Sbox
    str_w = ''
    for i in range(0,8,2):
        hang = AES_MaHoa.hexToDec( str_W3[i] )
        cot = AES_MaHoa.hexToDec( str_W3[i+1] )
        str_w += AES_MaHoa.Sbox[hang][cot]
    # Xor với Rcon
    Rcon = get_RCon(vong_lap)
    xor = WordXorWord(str_w, Rcon)
    return xor
#==============================================================================
def SinhKhoa(W0, W1, W2, W3, vong_lap):
    g = G(W3, vong_lap)
    W4=WordXorWord(W0, g)
    W5=WordXorWord(W1, W4)
    W6=WordXorWord(W2, W5)
    W7=WordXorWord(W3, W6)
    return W4, W5, W6, W7
#============================================================================== 
#==============================================================================
#==============================================================================
#==============================================================================
#==============================================================================
#==============================================================================
#==============================================================================
#==============================================================================
#==============================================================================
